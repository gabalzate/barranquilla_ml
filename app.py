# app.py - Predictor Electoral Barranquilla 2014
# Paso 1: Configuraci√≥n inicial y estructura base

# Importar las bibliotecas necesarias
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Configuraci√≥n de la p√°gina de Streamlit
st.set_page_config(
    page_title="Predictor Electoral Barranquilla",
    page_icon="üìä",
    layout="wide",  # Usar dise√±o ancho para aprovechar mejor el espacio
    initial_sidebar_state="collapsed"  # Sidebar colapsado inicialmente
)

# T√≠tulo principal de la aplicaci√≥n
st.title("Predictor de Votos - Barranquilla")

# Estructura b√°sica de la interfaz con dos columnas
col1, col2 = st.columns(2)

# Panel izquierdo - Par√°metros de Predicci√≥n
with col1:
    st.header("Par√°metros de Predicci√≥n")
    # Aqu√≠ ir√°n los controles para ingresar los par√°metros
    st.write("En este panel se incluir√°n los controles para seleccionar los par√°metros.")
    
# Panel derecho - Resultados de la Predicci√≥n
with col2:
    st.header("Resultados de la Predicci√≥n")
    # Aqu√≠ ir√° la visualizaci√≥n de los resultados
    st.write("En este panel se mostrar√°n los resultados de la predicci√≥n.")

# Mensaje informativo sobre la aplicaci√≥n
st.markdown("---")
st.info("Esta aplicaci√≥n utiliza un modelo XGBoost optimizado para predecir votos en las elecciones de Barranquilla.")


# Funciones de carga y preprocesamiento
# Estas funciones se ejecutar√°n una sola vez y se almacenar√°n en cach√©

@st.cache_resource
def load_model():
    """
    Carga el modelo XGBoost guardado.
    Usa cache_resource para cargar el modelo solo una vez.
    """
    try:
        with open('modelo_xgboost_optimizado_barranquilla.pkl', 'rb') as file:
            model = pickle.load(file)
        return model
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None

@st.cache_data
def load_data():
    """
    Carga el dataset original.
    Usa cache_data para cargar los datos solo una vez.
    """
    try:
        # Ajusta esta ruta seg√∫n donde tengas los datos
        data = pd.read_csv('./out/dataset_barranquilla_2014.csv')
        return data
    except Exception as e:
        st.error(f"Error al cargar los datos: {e}")
        return None

def preprocess_input(input_df, train_data):
    """
    Preprocesa las entradas del usuario de la misma manera que se hizo en el entrenamiento.
    
    Args:
        input_df: DataFrame con los datos ingresados por el usuario.
        train_data: DataFrame con los datos de entrenamiento para referencia.
        
    Returns:
        DataFrame preprocesado listo para la predicci√≥n.
    """
    # Codificar variables categ√≥ricas
    categorical_columns = ['G√âNERO', 'IDEOLOG√çA', 'CAMBIO DE POL√çTICAS', 'APOYADO POR PARTIDOS MAYORITARIOS']
    
    # Creamos una copia para no modificar el original
    processed_df = input_df.copy()
    
    for column in categorical_columns:
        if column in processed_df.columns and processed_df[column].dtype == 'object':
            le = LabelEncoder()
            # Ajustar el encoder con los datos de entrenamiento para mantener la coherencia
            le.fit(train_data[column].astype(str))
            # Transformar los datos de entrada
            processed_df[column] = le.transform(processed_df[column].astype(str))
    
    # Normalizar caracter√≠sticas num√©ricas
    numerical_columns = ['ZONA', 'COD_PUESTO', 'MESA', 'EDAD', '# CANDIDATOS', 
                       'A√ëOS DE TRAYECTORIA', 'ENCUESTA']
    
    # Crear y ajustar el scaler con los datos de entrenamiento
    scaler = StandardScaler()
    scaler.fit(train_data[numerical_columns])
    
    # Aplicar la transformaci√≥n a los datos de entrada
    processed_df[numerical_columns] = scaler.transform(processed_df[numerical_columns])
    
    return processed_df

# Intentar cargar el modelo y los datos
try:
    model = load_model()
    data = load_data()
    model_loaded = True
    
    # Solo para depuraci√≥n - mostrar las primeras filas del dataset
    if data is not None:
        st.sidebar.write("Dataset cargado correctamente")
        with st.sidebar.expander("Ver las primeras filas del dataset"):
            st.dataframe(data.head())
    else:
        model_loaded = False
        
except Exception as e:
    st.error(f"Error durante la inicializaci√≥n: {e}")
    model_loaded = False


# Panel izquierdo - Par√°metros de Predicci√≥n
with col1:
    st.header("Par√°metros de Predicci√≥n")
    
    # Crear un formulario para los par√°metros
    # El formulario agrupa los inputs y s√≥lo ejecuta la predicci√≥n cuando se presiona el bot√≥n
    with st.form(key="prediction_form"):
        # Obtener valores √∫nicos de los datos para poblar los selectores
        if model_loaded and data is not None:
            zonas = sorted(data['ZONA'].unique())
            puestos = sorted(data['COD_PUESTO'].unique())
            mesas = sorted(data['MESA'].unique())
            generos = sorted(data['G√âNERO'].unique())
            ideologias = sorted(data['IDEOLOG√çA'].unique())
            
            # Inputs para el usuario
            zona = st.selectbox("Zona:", zonas)
            puesto = st.selectbox("Puesto de votaci√≥n:", puestos)
            mesa = st.selectbox("Mesa:", mesas)
            genero = st.selectbox("G√©nero:", generos)
            ideologia = st.selectbox("Ideolog√≠a:", ideologias)
            
            # Sliders para variables num√©ricas
            edad = st.slider("Edad:", min_value=30, max_value=80, value=60, step=1)
            
            # Radio buttons para opciones binarias
            cambio_politicas = st.radio("¬øPropone cambio de pol√≠ticas?", ["Si", "No"])
            
            anos_trayectoria = st.slider("A√±os de trayectoria:", min_value=5, max_value=30, value=15, step=1)
            apoyo_mayoritario = st.radio("¬øApoyado por partidos mayoritarios?", ["Si", "No"])
            
            # Slider para el porcentaje en encuesta
            encuesta = st.slider("Porcentaje en encuesta:", min_value=0.0, max_value=50.0, value=15.0, step=0.1)
            
            # Bot√≥n para hacer la predicci√≥n
            predict_button = st.form_submit_button("Predecir")
        else:
            st.error("No se pudo cargar el modelo o los datos. Por favor verifica que los archivos existan y sean accesibles.")
            predict_button = st.form_submit_button("Predecir", disabled=True)



# : Implementar la funci√≥n de predicci√≥n
# Funci√≥n para realizar la predicci√≥n
def predict_votes(input_features, model, train_data):
    """
    Realiza la predicci√≥n de votos utilizando el modelo cargado.
    
    Args:
        input_features: DataFrame con los par√°metros ingresados por el usuario.
        model: Modelo XGBoost cargado.
        train_data: DataFrame con los datos de entrenamiento para preprocesamiento.
        
    Returns:
        int: N√∫mero de votos predicho.
    """
    try:
        # Preprocesar las caracter√≠sticas de entrada
        processed_features = preprocess_input(input_features, train_data)
        
        # Realizar la predicci√≥n
        prediction = model.predict(processed_features)[0]
        
        # Redondear al entero m√°s cercano ya que los votos son valores enteros
        votes = int(round(prediction))
        
        # Asegurar que no tengamos valores negativos
        votes = max(0, votes)
        
        return votes
    except Exception as e:
        st.error(f"Error durante la predicci√≥n: {e}")
        return None

# Panel derecho - Mostrar los resultados si se hizo clic en el bot√≥n de predicci√≥n
with col2:
    if predict_button and model_loaded:
        st.header("Resultados de la Predicci√≥n")
        
        # Crear un DataFrame con los datos ingresados
        input_data = pd.DataFrame({
            'ZONA': [zona],
            'COD_PUESTO': [puesto],
            'MESA': [mesa],
            'G√âNERO': [genero],
            '# CANDIDATOS': [5],  # Valor fijo seg√∫n el dataset
            'IDEOLOG√çA': [ideologia],
            'EDAD': [edad],
            'CAMBIO DE POL√çTICAS': [cambio_politicas],
            'A√ëOS DE TRAYECTORIA': [anos_trayectoria],
            'APOYADO POR PARTIDOS MAYORITARIOS': [apoyo_mayoritario],
            'ENCUESTA': [encuesta]
        })
        
        # Realizar la predicci√≥n
        predicted_votes = predict_votes(input_data, model, data)
        
        if predicted_votes is not None:
            # Crear un contenedor para mostrar el resultado principal
            result_container = st.container()
            
            with result_container:
                # Mostrar el resultado con un formato destacado
                st.markdown(f"## üó≥Ô∏è Predicci√≥n: {predicted_votes} votos")
                
                # Calcular el porcentaje para la barra de progreso basado en el m√°ximo de votos
                max_votes = int(data['VOTOS'].max())
                progress_pct = min(1.0, predicted_votes / max_votes)
                
                # Determinar el color seg√∫n el porcentaje
                if progress_pct > 0.7:
                    bar_color = "green"
                elif progress_pct > 0.3:
                    bar_color = "orange"
                else:
                    bar_color = "red"
                
                # Crear una barra de progreso simple
                st.markdown(f"### Escala de Votos (m√°ximo: {max_votes})")
                st.progress(progress_pct)
                
                # Texto interpretativo sobre la posici√≥n en la escala
                if progress_pct > 0.7:
                    st.markdown("üåü **Resultado alto** en la escala de votos")
                elif progress_pct > 0.3:
                    st.markdown("‚úÖ **Resultado medio** en la escala de votos")
                else:
                    st.markdown("‚ö†Ô∏è **Resultado bajo** en la escala de votos")
                
                # Mostrar informaci√≥n contextual sobre el resultado
                avg_votes = int(data['VOTOS'].mean())
                median_votes = int(data['VOTOS'].median())
                
                # Crear columnas para estad√≠sticas comparativas
                stat_col1, stat_col2, stat_col3 = st.columns(3)
                
                with stat_col1:
                    st.metric(label="Predicci√≥n", value=f"{predicted_votes}", 
                             delta=f"{predicted_votes - avg_votes} vs promedio")
                
                with stat_col2:
                    st.metric(label="Promedio", value=f"{avg_votes}")
                    
                with stat_col3:
                    st.metric(label="Mediana", value=f"{median_votes}")
                
                # A√±adir interpretaci√≥n del resultado
                if predicted_votes > avg_votes * 1.5:
                    st.success("üåü **Resultado excepcional**: La predicci√≥n sugiere un rendimiento muy por encima del promedio.")
                elif predicted_votes > avg_votes:
                    st.success("‚úÖ **Buen resultado**: La predicci√≥n est√° por encima del promedio de votos.")
                elif predicted_votes > avg_votes * 0.5:
                    st.warning("‚ö†Ô∏è **Resultado moderado**: La predicci√≥n est√° por debajo del promedio pero dentro de rangos normales.")
                else:
                    st.error("‚ùó **Resultado bajo**: La predicci√≥n muestra un n√∫mero de votos significativamente por debajo del promedio.")
                
                # Mostrar informaci√≥n adicional
                with st.expander("M√°s informaci√≥n sobre esta predicci√≥n"):
                    st.info("""
                    Esta predicci√≥n se basa en un modelo de XGBoost optimizado, entrenado 
                    con datos hist√≥ricos de las elecciones de Barranquilla 2014.
                    
                    La precisi√≥n general del modelo es:
                    - **R¬≤ (coeficiente de determinaci√≥n)**: 0.80, lo que significa que el modelo explica 
                      aproximadamente el 80% de la variabilidad en el n√∫mero de votos.
                    - **RMSE (error cuadr√°tico medio)**: 5.94 votos, que representa el error promedio en las predicciones.
                    """)
                    
                # Generar un gr√°fico de barras simple para visualizar la predicci√≥n y compararla
                st.subheader("Comparaci√≥n con promedios")
                
                comparison_data = pd.DataFrame({
                    'Categor√≠a': ['Predicci√≥n', 'Promedio', 'Mediana'],
                    'Votos': [predicted_votes, avg_votes, median_votes]
                })
                
                fig, ax = plt.subplots(figsize=(10, 5))
                bars = ax.bar(
                    comparison_data['Categor√≠a'],
                    comparison_data['Votos'],
                    color=['crimson', 'steelblue', 'lightgreen']
                )
                
                # A√±adir etiquetas con valores
                for bar in bars:
                    height = bar.get_height()
                    ax.text(
                        bar.get_x() + bar.get_width()/2.,
                        height + 0.5,
                        f'{int(height)}',
                        ha='center',
                        va='bottom',
                        fontweight='bold'
                    )
                
                ax.set_ylabel('Votos')
                ax.set_title('Comparaci√≥n de la predicci√≥n con valores de referencia')
                
                st.pyplot(fig)
        else:
            st.error("No se pudo realizar la predicci√≥n. Verifica los par√°metros ingresados.")







#_________________________________________________________________________________
# BLOQUE HORIZONTAL DEBAJO

# Paso 4: An√°lisis de caracter√≠sticas (layout horizontal)

# Este c√≥digo debe ir DESPU√âS de todos los bloques anteriores de visualizaci√≥n
# Se coloca como una nueva secci√≥n completa debajo de los resultados principales

# A√±adir un separador para la siguiente secci√≥n
st.markdown("---")
st.header("An√°lisis de Caracter√≠sticas del Modelo")
st.markdown("Esta secci√≥n te permite entender qu√© factores tienen mayor influencia en la predicci√≥n y c√≥mo cambiar√≠a el resultado al modificarlos.")

# Obtener la importancia de caracter√≠sticas del modelo
feature_importance = pd.DataFrame({
    'Feature': model.feature_names_in_,  # Accedemos a los nombres de caracter√≠sticas
    'Importance': model.feature_importances_
}).sort_values(by='Importance', ascending=False)

# Definir una funci√≥n para traducir nombres de caracter√≠sticas a nombres m√°s amigables
def get_feature_display_name(feature_name):
    """Convierte nombres de caracter√≠sticas t√©cnicos a nombres m√°s amigables para mostrar."""
    name_mapping = {
        'ZONA': 'Zona Electoral',
        'COD_PUESTO': 'C√≥digo de Puesto',
        'MESA': 'Mesa Electoral',
        'G√âNERO': 'G√©nero',
        '# CANDIDATOS': 'N√∫mero de Candidatos',
        'IDEOLOG√çA': 'Ideolog√≠a Pol√≠tica',
        'EDAD': 'Edad del Candidato',
        'CAMBIO DE POL√çTICAS': 'Propone Cambio de Pol√≠ticas',
        'A√ëOS DE TRAYECTORIA': 'A√±os de Trayectoria',
        'APOYADO POR PARTIDOS MAYORITARIOS': 'Apoyo de Partidos Mayoritarios',
        'ENCUESTA': 'Porcentaje en Encuestas'
    }
    return name_mapping.get(feature_name, feature_name)

# Aplicar la funci√≥n para obtener nombres m√°s amigables
feature_importance['Display Name'] = feature_importance['Feature'].apply(get_feature_display_name)

# Mostrar solo las 5 caracter√≠sticas m√°s importantes para no sobrecargar la visualizaci√≥n
top_features = feature_importance.head(5).copy()

# Crear dos columnas para el layout horizontal
col_importance, col_sensitivity = st.columns([1, 1])

# Primera columna: Importancia de caracter√≠sticas
with col_importance:
    st.subheader("Importancia de Caracter√≠sticas")
    
    # Crear visualizaci√≥n de la importancia de caracter√≠sticas
    fig, ax = plt.subplots(figsize=(6, 5))
    
    # Crear barras horizontales para la importancia de caracter√≠sticas
    bars = ax.barh(
        top_features['Display Name'],
        top_features['Importance'],
        color='skyblue'
    )
    
    # A√±adir etiquetas y t√≠tulo
    ax.set_xlabel('Importancia Relativa')
    ax.set_ylabel('Caracter√≠stica')
    ax.set_title('Las 5 Caracter√≠sticas M√°s Importantes')
    
    # A√±adir valores num√©ricos a las barras
    for bar in bars:
        width = bar.get_width()
        ax.text(
            width + 0.01, 
            bar.get_y() + bar.get_height()/2., 
            f'{width:.3f}',
            ha='left', 
            va='center',
            fontweight='bold'
        )
    
    # Invertir el eje y para que la caracter√≠stica m√°s importante est√© arriba
    ax.invert_yaxis()
    
    # Ajustar layout
    fig.tight_layout()
    
    # Mostrar el gr√°fico en Streamlit
    st.pyplot(fig)
    
    # Mostrar interpretaci√≥n general
    st.markdown("""
    ### Interpretaci√≥n
    - **Mayor importancia**: Las caracter√≠sticas en la parte superior tienen mayor influencia en la predicci√≥n
    - **Influencia porcentual**: Los valores num√©ricos representan el peso relativo de cada factor
    - **Enfoque estrat√©gico**: Concentrar esfuerzos en mejorar los factores m√°s importantes
    """)

# Segunda columna: An√°lisis de sensibilidad
with col_sensitivity:
    st.subheader("An√°lisis de Sensibilidad")
    
    # Filtrar solo caracter√≠sticas num√©ricas importantes
    numeric_features = [f for f in top_features['Feature'] if f in ['ZONA', 'COD_PUESTO', 'MESA', 'EDAD', 'A√ëOS DE TRAYECTORIA', 'ENCUESTA']]
    
    # Crear una funci√≥n para simular cambios en las caracter√≠sticas
    def simulate_feature_change(input_df, feature_name, change_pct, model, train_data):
        """
        Simula el cambio en la predicci√≥n al modificar una caracter√≠stica.
        """
        # Crear una copia para no modificar los datos originales
        modified_df = input_df.copy()
        
        # Obtener el valor original
        original_value = modified_df[feature_name].iloc[0]
        
        # Calcular el nuevo valor (solo para caracter√≠sticas num√©ricas)
        if feature_name in numeric_features:
            # Aplicar el cambio porcentual
            new_value = original_value * (1 + change_pct/100)
            modified_df[feature_name] = new_value
        
        # Preprocesar ambos conjuntos de datos
        processed_original = preprocess_input(input_df, train_data)
        processed_modified = preprocess_input(modified_df, train_data)
        
        # Realizar predicciones
        original_pred = model.predict(processed_original)[0]
        modified_pred = model.predict(processed_modified)[0]
        
        return round(original_pred), round(modified_pred)
    
    # Si tenemos caracter√≠sticas num√©ricas importantes, mostrar an√°lisis de sensibilidad
    if numeric_features:
        st.markdown("Selecciona una caracter√≠stica y ajusta su valor para ver c√≥mo afecta a la predicci√≥n:")
        
        # Selector para elegir la caracter√≠stica a analizar
        selected_feature = st.selectbox(
            "Caracter√≠stica a modificar:",
            options=numeric_features,
            format_func=get_feature_display_name
        )
        
        # Slider para ajustar el porcentaje de cambio
        change_pct = st.slider(
            f"Modificar {get_feature_display_name(selected_feature)} (%)", 
            min_value=-50, 
            max_value=50, 
            value=0, 
            step=5
        )
        
        # Mostrar el valor original y el modificado
        original_val = input_data[selected_feature].iloc[0]
        modified_val = original_val * (1 + change_pct/100)
        
        # Formato para mostrar valores con la precisi√≥n adecuada
        if selected_feature == 'ENCUESTA':
            st.markdown(f"**Valor original:** {original_val:.1f}% ‚Üí **Valor modificado:** {modified_val:.1f}%")
        else:
            st.markdown(f"**Valor original:** {int(original_val)} ‚Üí **Valor modificado:** {int(modified_val)}")
        
        # Calcular el efecto del cambio
        if change_pct != 0:
            original, modified = simulate_feature_change(
                input_data, selected_feature, change_pct, model, data
            )
            
            # Mostrar el efecto del cambio
            change = modified - original
            change_text = f"+{change}" if change > 0 else f"{change}"
            
            # Crear columnas para mostrar valores actual y modificado
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    label="Votos originales", 
                    value=original
                )
            
            with col2:
                st.metric(
                    label="Votos con cambio", 
                    value=modified,
                    delta=change_text
                )
            
            # Visualizar el cambio en un gr√°fico
            compare_data = pd.DataFrame({
                'Escenario': ['Original', 'Modificado'],
                'Votos': [original, modified]
            })
            
            fig, ax = plt.subplots()
            bars = ax.bar(
                compare_data['Escenario'],
                compare_data['Votos'],
                color=['blue', 'orange']
            )
            
            # A√±adir etiquetas con valores
            for bar in bars:
                height = bar.get_height()
                ax.text(
                    bar.get_x() + bar.get_width()/2.,
                    height + 0.3,
                    f'{int(height)}',
                    ha='center',
                    va='bottom',
                    fontweight='bold'
                )
            
            ax.set_ylabel('Votos')
            ax.set_title(f'Efecto de cambiar {get_feature_display_name(selected_feature)}')
            
            # Ajustar el rango del eje y para mejor visualizaci√≥n
            max_value = max(original, modified) * 1.1
            ax.set_ylim(0, max_value)
            
            st.pyplot(fig)
            
            # A√±adir interpretaci√≥n
            impact_level = ""
            if abs(change) > 5:
                impact_level = "**muy significativo**"
            elif abs(change) > 2:
                impact_level = "**moderado**"
            else:
                impact_level = "**limitado**"
            
            st.markdown(f"El cambio del {change_pct}% en '{get_feature_display_name(selected_feature)}' tiene un impacto {impact_level} en la predicci√≥n ({change_text} votos).")
        else:
            st.info("Ajusta el porcentaje para ver el impacto en la predicci√≥n.")
    else:
        st.info("No hay caracter√≠sticas num√©ricas entre las m√°s importantes para realizar este an√°lisis.")

# Secci√≥n final con recomendaciones - Estilo horizontal con toda la anchura de la p√°gina
st.markdown("---")
st.subheader("Recomendaciones Estrat√©gicas")

# Crear layout de 3 columnas para recomendaciones
rec_col1, rec_col2, rec_col3 = st.columns(3)

# Obtener las 3 caracter√≠sticas m√°s importantes
top_3_features = feature_importance.head(3)['Feature'].tolist()
top_3_names = feature_importance.head(3)['Display Name'].tolist()

# Primera columna de recomendaci√≥n
with rec_col1:
    feature = top_3_features[0] if len(top_3_features) > 0 else ""
    display_name = top_3_names[0] if len(top_3_names) > 0 else ""
    
    st.markdown(f"### 1Ô∏è‚É£ {display_name}")
    
    if feature == 'ENCUESTA':
        st.markdown("""
        üìä **Recomendaci√≥n:**
        - Invertir en campa√±as de visibilidad p√∫blica
        - Trabajar con grupos de encuestas reconocidos
        - Aumentar presencia en medios y redes sociales
        """)
    elif feature == 'IDEOLOG√çA':
        st.markdown("""
        üß≠ **Recomendaci√≥n:**
        - Clarificar mensajes alineados con la ideolog√≠a
        - Fortalecer relaciones con grupos afines
        - Crear propuestas emblem√°ticas ideol√≥gicas
        """)
    elif feature in ['ZONA', 'COD_PUESTO', 'MESA']:
        st.markdown("""
        üó∫Ô∏è **Recomendaci√≥n:**
        - Identificar zonas de mayor potencial electoral
        - Enfocar recursos en √°reas prioritarias
        - Desarrollar estrategias por localidad
        """)
    else:
        st.markdown(f"""
        ‚≠ê **Recomendaci√≥n:**
        - Factor de alto impacto en resultados
        - Desarrollar estrategias espec√≠ficas
        - Monitorear constantemente esta variable
        """)

# Segunda columna de recomendaci√≥n
with rec_col2:
    feature = top_3_features[1] if len(top_3_features) > 1 else ""
    display_name = top_3_names[1] if len(top_3_names) > 1 else ""
    
    if feature:
        st.markdown(f"### 2Ô∏è‚É£ {display_name}")
        
        if feature == 'ENCUESTA':
            st.markdown("""
            üìä **Recomendaci√≥n:**
            - Mejorar posicionamiento en encuestas
            - Identificar factores que influyen en percepci√≥n
            - Segmentar mensajes por grupos demogr√°ficos
            """)
        elif feature == 'IDEOLOG√çA':
            st.markdown("""
            üß≠ **Recomendaci√≥n:**
            - Definir postura clara en temas clave
            - Destacar diferencias con oponentes
            - Mantener coherencia en comunicaciones
            """)
        elif feature in ['ZONA', 'COD_PUESTO', 'MESA']:
            st.markdown("""
            üó∫Ô∏è **Recomendaci√≥n:**
            - Analizar patrones de votaci√≥n por zona
            - Reforzar presencia en √°reas estrat√©gicas
            - Adaptar mensajes a realidades locales
            """)
        else:
            st.markdown(f"""
            ‚≠ê **Recomendaci√≥n:**
            - Optimizar este factor para mejorar resultados
            - Comparar con valores de candidatos exitosos
            - Establecer metas incrementales
            """)

# Tercera columna de recomendaci√≥n
with rec_col3:
    feature = top_3_features[2] if len(top_3_features) > 2 else ""
    display_name = top_3_names[2] if len(top_3_names) > 2 else ""
    
    if feature:
        st.markdown(f"### 3Ô∏è‚É£ {display_name}")
        
        if feature == 'ENCUESTA':
            st.markdown("""
            üìä **Recomendaci√≥n:**
            - Realizar encuestas internas peri√≥dicas
            - Identificar tendencias y cambios de opini√≥n
            - Ajustar estrategia seg√∫n resultados
            """)
        elif feature == 'IDEOLOG√çA':
            st.markdown("""
            üß≠ **Recomendaci√≥n:**
            - Alinear propuestas con valores ideol√≥gicos
            - Construir coaliciones con grupos afines
            - Evitar contradicciones en discurso
            """)
        elif feature in ['ZONA', 'COD_PUESTO', 'MESA']:
            st.markdown("""
            üó∫Ô∏è **Recomendaci√≥n:**
            - Implementar estrategias territoriales
            - Formar equipos locales de apoyo
            - Monitorear competencia por zonas
            """)
        else:
            st.markdown(f"""
            ‚≠ê **Recomendaci√≥n:**
            - Evaluar el impacto de cambios en este factor
            - Implementar mejoras graduales
            - Comunicar efectivamente los avances
            """)